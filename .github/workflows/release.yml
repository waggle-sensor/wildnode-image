name: Create Release

on:
  workflow_call:
    inputs:
      overlay_cache_key:
        required: false
        type: string
        default: ""
      version_extension:
        required: false
        type: string
        default: ""
  ## Disable release in this public repo until after a self-hosted runner can be setup safely
  # push:
  #   # Sequence of patterns matched against refs/tags
  #   tags:
  #     - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  workdir: _workdir

jobs:
  build:
    name: Create Release
    runs-on: self-hosted
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker buildx for multi-arch builds
        uses: docker/setup-buildx-action@v2

      # Steps for processing a worflow caller (i.e. overlayed software)
      - name: Download Overlay Cache
        id: download_overlay_cache
        if: inputs.overlay_cache_key != null
        uses: actions/cache@v3
        with:
          path: _workdir
          key: ${{ inputs.overlay_cache_key }}

      - name: Set the Cache Working Directory
        id: cache_dir
        run: |
          if [ ${{ steps.download_overlay_cache.outcome }} == 'skipped' ]; then
            echo "Cache step skipped, use current repo as working directory"
            echo "workdir=." >> $GITHUB_OUTPUT
          else
            if [ ${{ steps.download_overlay_cache.outputs.cache-hit }} == 'true' ]; then
              echo "Overlay cache found, use cache [$workdir] as working directory"
              echo "workdir=$workdir" >> $GITHUB_OUTPUT
            else
              echo "Overlay cache expected but not found. Exit"
              exit 1
            fi
          fi

      ## Build the Photon release
      - name: Build Photon Release
        id: build_release
        working-directory: ${{ steps.cache_dir.outputs.workdir }}
        run: |
          if [ ${{ inputs.version_extension }} != null ]; then
            ./release.sh -a -p -r release_manifest -c ${{ runner.temp }} -e ${{ inputs.version_extension }}
          else
            ./release.sh -a -p -r release_manifest -c ${{ runner.temp }}
          fi

      - name: Create Release
        # Split the assets into 2GB max size (GitHub limit) and upload to new release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x

          md5sum ${{ steps.cache_dir.outputs.workdir }}/*.tbz2 > ${{ steps.cache_dir.outputs.workdir }}/checksums.md5

          # split the assets into max size 2GiB
          for asset in ${{ steps.cache_dir.outputs.workdir }}/*.tbz2; do
            split --bytes=2GB $asset --suffix-length=1 --numeric-suffixes "${asset}-" --verbose
          done

          # create the array of assets to upload into the release
          assets=()
          for asset in ${{ steps.cache_dir.outputs.workdir }}/*.tbz2-*; do
            assets+=("$asset")
          done

          # create the release message
          tag_name="${GITHUB_REF##*/}"
          export commit_msg="$(git log --format=%B -n 1 $tag_name)"

          pushd ${{ steps.cache_dir.outputs.workdir }}
          photon_core=()
          photon_agent=()
          for asset in *.tbz2-*; do
            if [[ $asset == photon-core* ]]; then
              photon_core+=("$asset")
            else
              photon_agent+=("$asset")
            fi
          done
          export core_files=$(printf "%s\n" "${photon_core[@]}")
          export agent_files=$(printf "%s\n" "${photon_agent[@]}")
          envsubst '${commit_msg} ${core_files} ${agent_files}' <release_notes.md > rel_notes
          popd

          # create the release and upload assets
          #hub release create "${assets[@]}" -m "${body}" "${tag_name}"
          gh release create "${tag_name}" --title="Release $tag_name" --notes-file=${{ steps.cache_dir.outputs.workdir }}/rel_notes
          for asset in "${assets[@]}"; do
            gh release upload "${tag_name}" "${asset}"
          done

          gh release upload "${tag_name}" "${{ steps.cache_dir.outputs.workdir }}/checksums.md5"

          echo "Release [${tag_name}] creation complete"
