From c8a79e206170c7785f65ceb62e698e90adf23a14 Mon Sep 17 00:00:00 2001
From: Yen Lin <yelin@nvidia.com>
Date: Tue, 13 Jun 2017 16:26:24 -0700
Subject: [Add Warboot support for ODM Production Mode] warmboot: change wb
 prepare code for t1x4

If signing is required (based on fuse settings), the wb prepare code will
sign wb_header as before. If signing is not requried, the new wb prepare
code will combine wb_header and wb code to the destination address. The
digest signing, in this case, is done by an external utility.

Bug 1939655

Signed-off-by: Yen Lin <yelin@nvidia.com>

Change-Id: Id8462b92e4d3166d4f4f6809da6dcbc4f21b1105
---
 arch/arm/cpu/tegra-common/t1x4_warmboot.c   | 72 +++++++++++++++++++----------
 arch/arm/cpu/tegra124-common/warmboot_avp.c | 15 ++++--
 arch/arm/include/asm/arch-tegra/warmboot.h  |  3 ++
 3 files changed, 63 insertions(+), 27 deletions(-)

diff --git a/arch/arm/cpu/tegra-common/t1x4_warmboot.c b/arch/arm/cpu/tegra-common/t1x4_warmboot.c
index 049fb03..8836033 100644
--- a/arch/arm/cpu/tegra-common/t1x4_warmboot.c
+++ b/arch/arm/cpu/tegra-common/t1x4_warmboot.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2013, NVIDIA CORPORATION.  All rights reserved.
+ * Copyright (c) 2013-2017, NVIDIA CORPORATION.  All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify it
  * under the terms and conditions of the GNU General Public License,
@@ -247,8 +247,7 @@ static enum fuse_operating_mode fuse_get_operation_mode(u32 tegra_id)
 	chip_id = (chip_id & HIDREV_CHIPID_MASK) >> HIDREV_CHIPID_SHIFT;
 	if (chip_id == tegra_id) {
 		if (is_odm_production_mode()) {
-			printf("!! odm_production_mode is not supported !!\n");
-			return MODE_UNDEFINED;
+			return MODE_ODM_PRODUCTION;
 		} else {
 			if (is_production_mode())
 				return MODE_PRODUCTION;
@@ -277,6 +276,11 @@ static void determine_crypto_options(u32 tegra_id, int *is_encrypted,
 		*is_signed = 1;
 		*use_zero_key = 1;
 		break;
+	case MODE_ODM_PRODUCTION:
+		/*
+		 * For ODM production mode, signing is done by an external
+		 * signing utitity, hence set is_signed to 0.
+		 */
 	case MODE_UNDEFINED:
 	default:
 		*is_encrypted = 0;
@@ -328,6 +332,12 @@ int t1x4_wb_prepare_code(u32 tegra_id, u32 seg_address, u32 seg_length)
 	determine_crypto_options(tegra_id, &is_encrypted, &is_signed,
 				 &use_zero_key);
 
+	if (is_encrypted) {
+		printf("!!!! Encryption is not supported !!!!\n");
+		err = -EACCES;
+		goto fail;
+	}
+
 	/* Get the actual code limits. */
 	length = roundup(((u32)wb_end - (u32)wb_start), 16);
 
@@ -354,11 +364,36 @@ int t1x4_wb_prepare_code(u32 tegra_id, u32 seg_address, u32 seg_length)
 		goto fail;
 	}
 
+	/*
+	 * If signing is not required by this wb_prepare function, make sure
+	 * that wb_header has been properly updated by an external signing
+	 * utility.
+	 */
+	if (!is_signed) {
+		/*
+		 * By checking:
+		 *   1. wb_header's length_insecure is not 0,
+		 *   2. code_length matches to the calculated code length.
+		 */
+		if ((wb_header.length_insecure == 0) ||
+		    (length != wb_header.code_length)) {
+			printf("Error: WB0 code is not signed.\n");
+			err = -EACCES;
+			goto fail;
+		}
+	}
+
 	dst_header = (struct wb_header *)seg_address;
-	memset((char *)dst_header, 0, sizeof(struct wb_header));
 
-	/* Populate the random_aes_block as requested. */
-	{
+	/* copy wb header to destination */
+	memcpy((char *)dst_header, (char *)&wb_header, sizeof(struct wb_header));
+	/* copy the wb code directly following dst_header. */
+	memcpy((char *)(dst_header + 1), (char *)wb_start, length);
+
+	if (is_signed) {
+		memset((char *)dst_header, 0, sizeof(struct wb_header));
+
+		/* If signing is required, populate the random_aes_block */
 		u32 *aes_block = (u32 *)&(dst_header->random_aes_block);
 		u32 *end = (u32 *)(((u32)aes_block) +
 				   sizeof(dst_header->random_aes_block));
@@ -376,28 +411,17 @@ int t1x4_wb_prepare_code(u32 tegra_id, u32 seg_address, u32 seg_length)
 			*aes_block++ = 0;
 #endif
 		} while (aes_block < end);
-	}
 
-	/* Populate the header. */
-	dst_header->length_insecure = length + sizeof(struct wb_header);
-	dst_header->length_secure = length + sizeof(struct wb_header);
-	dst_header->destination = NV_WB_RUN_ADDRESS;
-	dst_header->entry_point = NV_WB_RUN_ADDRESS;
-	dst_header->code_length = length;
-
-	if (is_encrypted) {
-		printf("!!!! Encryption is not supported !!!!\n");
-		dst_header->length_insecure = 0;
-		err = -EACCES;
-		goto fail;
-	} else {
-		/* copy the wb code directly following dst_header. */
-		memcpy((char *)(dst_header+1), (char *)wb_start, length);
-	}
+		/* Populate the header. */
+		dst_header->length_insecure = length + sizeof(struct wb_header);
+		dst_header->length_secure = length + sizeof(struct wb_header);
+		dst_header->destination = NV_WB_RUN_ADDRESS;
+		dst_header->entry_point = NV_WB_RUN_ADDRESS;
+		dst_header->code_length = length;
 
-	if (is_signed)
 		err = sign_wb_code(seg_address, dst_header->length_insecure,
 				   use_zero_key);
+	}
 
 fail:
 	if (err)
diff --git a/arch/arm/cpu/tegra124-common/warmboot_avp.c b/arch/arm/cpu/tegra124-common/warmboot_avp.c
index 7639450..2da10b0 100644
--- a/arch/arm/cpu/tegra124-common/warmboot_avp.c
+++ b/arch/arm/cpu/tegra124-common/warmboot_avp.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2013, NVIDIA CORPORATION.  All rights reserved.
+ * Copyright (c) 2013-2017, NVIDIA CORPORATION.  All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify it
  * under the terms and conditions of the GNU General Public License,
@@ -27,7 +27,16 @@
 #include <asm/arch/sysctr.h>
 #include "warmboot_avp.h"
 
-void wb_start(void)
+/*
+ * Allocate space for wb_header
+ */
+struct wb_header wb_header =
+{
+	.destination = NV_WB_RUN_ADDRESS,
+	.entry_point = NV_WB_RUN_ADDRESS,
+};
+
+void __attribute__((aligned(16))) wb_start(void)
 {
 	struct pmc_ctlr *pmc = (struct pmc_ctlr *)NV_PA_PMC_BASE;
 	struct flow_ctlr *flow = (struct flow_ctlr *)NV_PA_FLOW_BASE;
@@ -380,6 +389,6 @@ do_reset:
  * wb_end() is a dummy function, and must be directly following wb_start(),
  * and is used to calculate the size of wb_start().
  */
-void wb_end(void)
+void __attribute__((aligned(16))) wb_end(void)
 {
 }
diff --git a/arch/arm/include/asm/arch-tegra/warmboot.h b/arch/arm/include/asm/arch-tegra/warmboot.h
index 6b37b60..22572cf 100644
--- a/arch/arm/include/asm/arch-tegra/warmboot.h
+++ b/arch/arm/include/asm/arch-tegra/warmboot.h
@@ -15,6 +15,7 @@
 
 /* Defines the supported operating modes */
 enum fuse_operating_mode {
+	MODE_ODM_PRODUCTION = 1,
 	MODE_PREPRODUCTION = 2,
 	MODE_PRODUCTION = 3,
 	MODE_UNDEFINED,
@@ -58,6 +59,8 @@ struct wb_header {
 	u32 code_length;	/* length of the code */
 };
 
+extern struct wb_header wb_header;
+
 /*
  * The warm boot code needs direct access to these registers since it runs in
  * SRAM and cannot call other U-Boot code.
-- 
2.1.4

